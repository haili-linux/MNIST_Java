import java.util.*;

import haili.deeplearn.model.Sequential;
import jcuda.runtime.surfaceReference;
import haili.deeplearn.model.layer.*;
import haili.deeplearn.utils.MatrixUtil;

import java.io.*;

public class SnakeGame {

    private static final int WIDTH = 15;
    private static final int HEIGHT = 15;
    private static final char SNAKE_HEAD_CHAR = 'O';
    private static final char SNAKE_BODY_CHAR = 'o';
    private static final char FOOD_CHAR = '*';
    private static final char EMPTY_CHAR = ' ';
    private static final char WALL_CHAR = '#';

    private Deque<Point> snake = new LinkedList<>();
    private Point food;
    private static char direction = 'D'; // 方向：右
    public boolean gameOver = false;
    private static Random rand = new Random();
    public StringBuffer gameStr = new StringBuffer();
    public int time = 0;

    public boolean VIEW = true;

    
    public static void test(Sequential model, float[] s){
        
            //model = qLearningTest.model;

            //float[] s = Layer.GaussRandomArrays(model.input_dimension - 5);
    
            float[] a = new float[]{1, 0, 0, 0, 0};
            float[] input = MatrixUtil.combine(s, a);
            float[] output = model.forward(input);
            System.out.println(Arrays.toString(output));

            a[0] = 0;
            a[2] = 1;
            input = MatrixUtil.combine(s, a);
            output = model.forward(input);
            System.out.println(Arrays.toString(output));
        

        //if(VIEW)
        //    return;
    }

    public static float[] keyInput(){
        Scanner scanner = new Scanner(System.in);
        String iString = scanner.next();
        char c = iString.charAt(0);
        float[] r = new float[5];
        for(int i = 0; i < acts.length; i++){
            if(acts[i] == c){
                r[i] = 1;
                return r;
            }
        }

        r[4] = 1;
        return r;
    }

    public static float[] playRandom(){
        float[] act = new float[5];
        int index = (int)(act.length * Math.random());
        act[index] = 1f;
        return act;
    }

    static char[] acts = {'W', 'S', 'A', 'D', ' '};
    public static char floatToAct(float[] act){
        
        int max_index = 0;
        for(int i = 1; i < act.length; i++){
           if( act[i] > act[max_index])
                max_index = i;
        }

        return acts[max_index];
    }

    public static float[] statToFloat(String s){
        s = s.replace("\n", "");
        float[] r = new float[s.length()];
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            switch (c) {
                // case EMPTY_CHAR:
                //         r[i] = 0;
                //     break;
                case FOOD_CHAR:
                    r[i] = 1f;
                break;
                case SNAKE_BODY_CHAR:
                    r[i] = 0.5f;
                break;
                case SNAKE_HEAD_CHAR:
                    r[i] = -0.5f;
                break;
                case WALL_CHAR:
                    r[i] = -1;
                break;
                
            }
        }

        return r;
    }


    public void initGame() {
        gameOver = false;

        snake.clear();

        int x = (int)(Math.random() * (WIDTH - 1)) + 1;
        int y = (int)(Math.random() * HEIGHT);
        if(x==0){

        }

        snake.add(new Point(x, y));
        snake.add(new Point(x - 1, y));
        generateFood();
    }

    private void generateFood() {
        while (true) {
            int x = rand.nextInt(WIDTH);
            int y = rand.nextInt(HEIGHT);
            Point p = new Point(x, y);
            if (!snake.contains(p)) {
                food = p;
                break;
            }
        }
    }

    public void update() {
        time++;
        Point head = snake.peekFirst();
        Point newHead = new Point(head.x, head.y);

        switch (direction) {
            case 'W': newHead.y--; break;
            case 'S': newHead.y++; break;
            case 'A': newHead.x--; break;
            case 'D': newHead.x++; break;
        }

        
        if (newHead.x < 0 || newHead.y < 0 || newHead.x >= WIDTH || newHead.y >= HEIGHT || snake.contains(newHead)) {
            gameOver = true;
            return;
        }

        snake.addFirst(newHead);

        if (newHead.equals(food)) {
            generateFood(); 
            time = 0;
        } else {
            snake.removeLast(); 
        }

        if(time > 100) {
            gameOver = true;
        }
    }

    public void render() {
        char[][] board = new char[HEIGHT][WIDTH];

        for (char[] row : board) Arrays.fill(row, EMPTY_CHAR);

        for (Point p : snake){
            if (p == snake.peekFirst()) 
                board[p.y][p.x] = SNAKE_HEAD_CHAR; 
            else 
                board[p.y][p.x] = SNAKE_BODY_CHAR; 
        }

        board[food.y][food.x] = FOOD_CHAR;

        // 清屏
        System.out.print("\033[H\033[2J");
        System.out.flush();

        gameStr = new StringBuffer();
        // 输出上边框
        for (int i = 0; i < WIDTH + 2; i++) 
            gameStr.append(WALL_CHAR); //System.out.print(WALL_CHAR);

        gameStr.append('\n'); //System.out.println();

        for (int y = 0; y < HEIGHT; y++) {
            //System.out.print(WALL_CHAR);
            gameStr.append(WALL_CHAR);
            for (int x = 0; x < WIDTH; x++) {
                //System.out.print(board[y][x]);
                gameStr.append(board[y][x]);
            }
            //System.out.println(WALL_CHAR);
            gameStr.append(WALL_CHAR).append('\n');
        }

        // 输出下边框
        for (int i = 0; i < WIDTH + 2; i++) 
            //System.out.print(WALL_CHAR);
            gameStr.append(WALL_CHAR);
        
        if(VIEW){
            System.out.println(gameStr);
            System.out.println(gameStr.toString().length());
            System.out.println();
        }
    }

    public void readInput() {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            while (!gameOver) {
                String line = reader.readLine();
                if (line == null || line.isEmpty()) continue;
                char input = Character.toUpperCase(line.charAt(0));
                if ((input == 'W' && direction != 'S') ||
                    (input == 'S' && direction != 'W') ||
                    (input == 'A' && direction != 'D') ||
                    (input == 'D' && direction != 'A')) {
                    direction = input;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void readInput(char input) {
        if ((input == 'W' && direction != 'S') ||
            (input == 'S' && direction != 'W') ||
            (input == 'A' && direction != 'D') ||
            (input == 'D' && direction != 'A')) {
            direction = input;
        }
    }
   
    public float getSorce() {
        return gameOver ? snake.size() * 2 - 64  - time * 0.05f : snake.size() * 2  - time * 0.05f;
    }
   
    // 简单 Point 类
    private static class Point {
        int x, y;
        Point(int x, int y) { this.x = x; this.y = y; }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Point)) return false;
            Point p = (Point) o;
            return x == p.x && y == p.y;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }
    }

}


import java.sql.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;

import haili.deeplearn.DeltaOptimizer.Adam;
import haili.deeplearn.function.Function;
import haili.deeplearn.function.activation.LRelu;
import haili.deeplearn.model.Sequential;
import haili.deeplearn.model.layer.ActivationLayer;
import haili.deeplearn.model.layer.Conv2D;
import haili.deeplearn.model.layer.Dense;
import haili.deeplearn.model.layer.FilterResponseNormalization;
import haili.deeplearn.model.layer.Layer;
import haili.deeplearn.model.layer.ResBlock;
import haili.deeplearn.model.layer.Reshape;
import haili.deeplearn.model.layer.SplitLayer;
import haili.deeplearn.utils.MatrixUtil;




public class Test implements Comparable<Test>{

    static QLearning2 qLearning2 = new QLearning2();

    static ArrayList<float[]> statusList = new ArrayList<>();
    static ArrayList<float[]> actList = new ArrayList<>();
    static ArrayList<Float> sorceList = new ArrayList<>();
    static ArrayList<Integer> gameOverList = new ArrayList<>();
    

    public static void main(String[] args) throws Exception{

        SnakeGame snakeGame = new SnakeGame();
        snakeGame.initGame();
        

        long time = System.currentTimeMillis();
        while (true) {
            snakeGame.render();

            float[] s = SnakeGame.statToFloat(snakeGame.gameStr.toString());
            float[] act = qLearning2.play(s);
            statusList.add(s);
            actList.add(act);

            snakeGame.readInput(SnakeGame.floatToAct(act));
            snakeGame.update();

            sorceList.add(snakeGame.getSorce());

            long nowtime = System.currentTimeMillis();
            if ( nowtime - time > 10000) {
                snakeGame.VIEW = true;
                time = nowtime;
            } 
            
            if(snakeGame.gameOver){
                System.out.println("gameOver  Sc " + snakeGame.getSorce());
                gameOverList.add(0);
                trainning();
                snakeGame.VIEW = false;
                snakeGame.initGame();
                continue;
            } else {
                System.out.println("Sc " + snakeGame.getSorce());
                gameOverList.add(1);
            }

            removeData();

            if(snakeGame.VIEW)
                Thread.sleep(200); // ゲーム速度
        }

    }

    public static void removeData() {
        if (statusList.size() > 512) {
            statusList.remove(0);
            actList.remove(0);
            sorceList.remove(0);
            gameOverList.remove(0);
        }
    }

    public static void trainning() {
        if (sorceList.size() == 0)
            return;

        float[][] train_x = new float[statusList.size()][];
        float[][] train_y = new float[statusList.size()][];

        for (int i = 0; i < train_x.length; i++) {
            train_x[i] = MatrixUtil.combine(statusList.get(i), actList.get(i));

            if (gameOverList.get(i) == 1 && i < train_x.length - 1)
                train_y[i] = new float[]{ sorceList.get(i) + 0.9f * qLearning2.getMaxSorce(statusList.get(i + 1))};
            else 
                train_y[i] = new float[]{ sorceList.get(i) };
        }

        qLearning2.model.fit(train_x, train_y, 64, 10, 4);
    }


    @Override
    public int compareTo(Test arg0) {
        // TODO Auto-generated method stub
        return 0;
    }

    static int[] sort(int[] A){
        for(int i = 0; i < A.length; i++){
            for(int j = 0; j < A.length - i - 1; j++){
                int c = j + 1;
                if(A[j] > A[c]){
                    int temp = A[c];
                    A[c] = A[j];
                    A[j] = temp;
                }
            }
        }

        return A;
    }

}




